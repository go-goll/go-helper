// Code generated by zero model. DO NOT EDIT.
package internal

import (
	"context"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// New{{.TableName}}Dao custom table name
func New{{.TableName}}Dao(ormDB *mongo.Database) {{.TableName}}Dao {
	mgo := {{.TableName}}Dao{ DB: ormDB}

	{{.MgoIndex}}
	return mgo
}

// {{.TableName}}Obj data model
type {{.TableName}}Obj struct {
	{{range $index,$elem := .Fields}}{{$elem.Name}} {{$elem.Type}} `json:"{{toSnake $elem.Name}}"`
	{{end}}
}

// {{.TableName}}Dao data access object
type {{.TableName}}Dao struct {
	DB *mongo.Database
}

// Collection mongodb with collection
func (d {{.TableName}}Dao)Collection() *mongo.Collection {
	return d.DB.Collection("{{toSnake .TableName}}")
}

// Insert{{.TableName}} create object
func (d {{.TableName}}Dao)Insert{{.TableName}}(obj *{{.TableName}}Obj) error {
	_, err := d.Collection().InsertOne(context.Background(), obj)
	return err
}

// Delete{{.TableName}} delete object
func (d {{.TableName}}Dao)Delete{{.TableName}}(id string) error {
	filter := bson.M{"_id": id}
	_, err := d.Collection().DeleteOne(context.Background(), filter)
	return err
}

// Update{{.TableName}} update object
func (d {{.TableName}}Dao)Update{{.TableName}}(id string, fields map[string]interface{}) error {
	filter := bson.M{"_id": id}
	params := bson.M{}
	for k, v := range fields {
		params[k] = v
	}
	update := bson.M{"$set": params}
	_, err := d.Collection().UpdateOne(context.Background(), filter, update)
	return err
}

// Select{{.TableName}} select object
func (d {{.TableName}}Dao)Select{{.TableName}}(id string) (*{{.TableName}}Obj, error) {
	obj := new({{.TableName}}Obj)

	filter := bson.M{"_id": id}
	err := d.Collection().FindOne(context.Background(), filter).
	  Decode(obj)
	return obj, err
}

{{.IndexGo}}
